# -*- coding: utf-8 -*-
import os
import shutil

default_folder_path = os.path.join(
    os.path.dirname(os.path.abspath(__file__)),
    '../ignition-data/projects/Novotek-core'
)

AUTO_HEADER_TOKEN = "Auto-generated by packaging script"

def remove_extracted_scripts(folder_path: str) -> None:
    """Delete all 'extracted_scripts' folders under folder_path."""
    try:
        if not os.path.isdir(folder_path):
            print(f"{folder_path} is not a valid directory.")
            return

        for root, dirs, files in os.walk(folder_path, topdown=False):
            for name in dirs:
                if name == 'extracted_scripts':
                    folder_to_remove = os.path.join(root, name)
                    shutil.rmtree(folder_to_remove, ignore_errors=True)
                    print(f"Removed folder: {folder_to_remove}")
    except Exception as e:
        print("An error occurred while removing extracted scripts:", str(e))

def _file_contains_token(path: str, token: str) -> bool:
    try:
        with open(path, 'r', encoding='utf-8', errors='replace') as f:
            # read a small chunk is enough
            head = f.read(4096)
        return token in head
    except Exception:
        return False

def remove_autogenerated_inits(folder_path: str) -> None:
    """
    Remove __init__.py files auto-generated by our packaging script.
    We detect them by the header token in the file.
    Only looks under directories named 'script-python'.
    """
    try:
        if not os.path.isdir(folder_path):
            print(f"{folder_path} is not a valid directory.")
            return

        for root, dirs, files in os.walk(folder_path):
            # only operate under script-python subtrees
            parts = os.path.normpath(root).split(os.sep)
            if 'script-python' not in parts:
                continue

            for fname in files:
                if fname == '__init__.py':
                    fpath = os.path.join(root, fname)
                    if _file_contains_token(fpath, AUTO_HEADER_TOKEN):
                        try:
                            os.remove(fpath)
                            print(f"Removed auto-generated __init__.py: {fpath}")
                        except Exception as e:
                            print(f"Failed to remove {fpath}: {e}")
    except Exception as e:
        print("An error occurred while removing __init__.py files:", str(e))

if __name__ == "__main__":
    import sys
    target = default_folder_path if len(sys.argv) != 2 else sys.argv[1]
    remove_extracted_scripts(target)
    remove_autogenerated_inits(target)
